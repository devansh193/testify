generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  image     String?
  password  String?
  boards    Board[]
  accounts  Account[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Board {
  id                   String        @id @default(uuid())
  boardTitle           String        @unique
  pageTitle            String
  pageDescription      String
  isVideoReview        Boolean
  textReviewPageTitle  String?
  textQuestions        String[]
  videoReviewPageTitle String
  videoQuestions       String[]
  personalPageTitle    String
  thankYouPageTitle    String
  thankYouPageMessage  String
  thankYouPageImage    String?
  userId               String
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  testimonials         Testimonial[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model Testimonial {
  id         String   @id @default(uuid())
  name       String
  email      String
  textReview String
  rating     Int?
  userImage  String?
  boardId    String
  board      Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
